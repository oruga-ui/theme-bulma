@use "sass:list";

@use "utils/variables" as vars;
@use "bulma/sass/utilities/css-variables" as css;
@use "bulma/sass/utilities/mixins" as mixins;

.steps-wrapper {
    @include css.register-vars(
        (
            "steps-size": #{vars.$size-normal},
            "steps-divider-height": #{vars.$steps-divider-height},
            "steps-details-background-color":
                #{vars.$steps-details-background-color},
        )
    );

    // sizes
    @each $name, $value in vars.$sizes-map {
        &.is-#{$name} {
            @include css.register-vars(
                (
                    "steps-size": #{$value},
                )
            );
        }
    }

    .steps {
        display: flex;
        flex-wrap: wrap;
        font-size: css.getVar("steps-size");
        min-height: calc(css.getVar("steps-size") * 2);
        list-style: none;

        &.is-animated {
            .step {
                &:not(:first-child),
                &:only-child {
                    &::before {
                        transition: background vars.$speed-slow
                            css.getVar("easing");
                    }
                }
            }
        }

        &.has-label-right,
        &.has-label-left {
            .step-title {
                background-color: css.getVar("steps-details-background-color");
                padding: 0.2em;
            }
        }

        &.has-label-right {
            .step-link {
                flex-direction: row;
            }
        }

        &.has-label-left {
            .step-link {
                flex-direction: row-reverse;
            }
        }
    }

    .step {
        @include css.register-vars(
            (
                "steps-default-color": #{vars.$steps-default-color},
                "steps-active-color": #{vars.$steps-active-color},
                "steps-active-background": #{vars.$steps-active-background},
                "steps-previous-color": #{vars.$steps-previous-color},
                "steps-previous-background": #{vars.$steps-previous-background},
                "steps-marker-background": #{vars.$steps-marker-background},
                "steps-marker-color": #{vars.$steps-marker-color},
                "steps-marker-border": #{vars.$steps-marker-border},
                "steps-marker-border-color": #fff,
            )
        );

        margin-top: 0;
        position: relative;
        flex-grow: 1;
        flex-basis: 1em;
        display: flex;
        justify-content: center;
        align-items: center;

        &::before,
        &::after {
            background: linear-gradient(
                to left,
                css.getVar("steps-default-color") 50%,
                css.getVar("steps-active-color") 50%
            );
            background-size: 200% 100%;
            background-position: right bottom;
        }

        &:not(:first-child),
        &:only-child {
            flex-shrink: 1;

            &::before {
                // This will contain the divider
                content: " ";
                display: block;
                position: absolute;
                width: 100%;
                bottom: 0;
                height: css.getVar("steps-divider-height");
                top: calc(
                    css.getVar("steps-size") -
                        (css.getVar("steps-divider-height") / 2)
                );

                @include mixins.ltr {
                    left: -50%;
                }
                @include mixins.rtl {
                    left: 50%;
                }
            }
        }

        &:only-child {
            &::after {
                // This will contain the divider
                content: " ";
                display: block;
                position: absolute;
                height: css.getVar("steps-divider-height");
                bottom: 0;
                top: css.getVar("steps-size");
            }

            &::before,
            &::after {
                width: 25%;
                left: 50%;
            }

            &::before {
                right: 50%;
                left: auto;
            }
        }

        &.is-active {
            @include css.register-vars(
                (
                    "steps-marker-color": css.getVar("steps-active-color"),
                    "steps-marker-background": css.getVar(
                            "steps-active-background"
                        ),
                    "steps-marker-border-color": css.getVar(
                            "steps-active-color"
                        ),
                )
            );

            .step-link {
                cursor: default;
            }
        }

        &.is-previous {
            @include css.register-vars(
                (
                    "steps-marker-color": css.getVar("steps-previous-color"),
                    "steps-marker-background": css.getVar(
                            "steps-previous-background"
                        ),
                )
            );
        }

        &.is-previous,
        &.is-active {
            &::before,
            &::after {
                background-position: left bottom;
            }
        }

        // Override marker color per step
        @each $name, $pair in vars.$steps-colors {
            $color: list.nth($pair, 1);
            $color-invert: if(
                list.length($pair) >= 2,
                list.nth($pair, 2),
                css.getVar("scheme-main")
            );

            &.is-#{$name} {
                @include css.register-vars(
                    (
                        "steps-active-color": $color,
                        "steps-previous-color": $color-invert,
                        "steps-previous-background": $color,
                    )
                );
            }
        }
    }

    .step-link {
        background: none;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }

    .step-marker {
        align-items: center;
        display: flex;
        justify-content: center;
        border-radius: css.getVar("radius");
        font-weight: css.getVar("weight-bold");
        color: css.getVar("steps-marker-color");
        background: css.getVar("steps-marker-background");
        border: css.getVar("steps-marker-border");
        border-color: css.getVar("steps-marker-border-color");
        z-index: 1;
        overflow: hidden;

        height: calc(css.getVar("steps-size") * 2);
        width: calc(css.getVar("steps-size") * 2);

        .icon {
            *,
            *:before {
                font-size: css.getVar("steps-size");
            }
        }

        &.is-rounded {
            border-radius: css.getVar("radius-rounded");
        }
    }

    .step-title {
        text-align: center;
        font-size: calc(css.getVar("steps-size") * 1.2);
        font-weight: css.getVar("weight-semibold");
        line-height: css.getVar("steps-size");
        z-index: 1;
    }

    .step-content {
        position: relative;
        overflow: visible;
        display: flex;
        flex-direction: column;
        padding: 1rem;

        &.is-transitioning {
            overflow: hidden;
        }

        .step-item {
            flex-shrink: 0;
            flex-basis: auto;
            text-align: center;
        }
    }

    &.is-vertical {
        @include css.register-vars(
            (
                "steps-vertical-padding": #{vars.$steps-vertical-padding},
            )
        );

        display: flex;
        flex-direction: row;
        flex-wrap: wrap;

        .steps {
            height: 100%;
            flex-direction: column;

            &.has-label-right {
                .step {
                    justify-content: flex-start;

                    &:not(:first-child),
                    &:only-child {
                        &::before,
                        &::after {
                            left: calc(
                                css.getVar("steps-size") -
                                    (css.getVar("steps-divider-height") * 0.5)
                            );
                        }
                    }
                }
            }

            &.has-label-left {
                .step {
                    justify-content: flex-end;

                    &:not(:first-child),
                    &:only-child {
                        &::before,
                        &::after {
                            left: auto;
                            right: calc(
                                css.getVar("steps-size") -
                                    (css.getVar("steps-divider-height") * 0.5)
                            );
                        }
                    }
                }
            }

            &:not(.has-label-right):not(.has-label-left) {
                .step-title {
                    background-color: css.getVar(
                        "steps-details-background-color"
                    );
                }
            }
        }

        .step {
            padding: css.getVar("steps-vertical-padding");

            &::before,
            &::after {
                background: linear-gradient(
                    to top,
                    css.getVar("steps-default-color") 50%,
                    css.getVar("steps-active-color") 50%
                );
                background-size: 100% 200%;
                background-position: left bottom;
            }

            &:not(:first-child),
            &:only-child {
                &::before {
                    height: 100%;
                    width: css.getVar("steps-divider-height");
                    top: -50%;
                    left: calc(
                        50% - (css.getVar("steps-divider-height") * 0.5)
                    );
                }
            }

            &:only-child {
                &::before {
                    top: 50%;
                }

                &::after {
                    width: css.getVar("steps-divider-height");
                    top: auto;
                    bottom: 50%;
                }

                &::before,
                &::after {
                    height: 25%;
                }
            }

            &.is-active,
            &.is-previous {
                &::before,
                &::after {
                    background-position: right top;
                }
            }
        }

        .step-content {
            flex-grow: 1;
        }

        .step-navigation {
            flex-basis: 100%;
        }

        &.is-right {
            flex-direction: row-reverse;
        }
    }

    @include mixins.until(vars.$steps-mobile-breakpoint) {
        &:not(.is-vertical) {
            .step {
                &:not(.is-active) {
                    display: none;
                }

                &::before,
                &::after,
                &:not(:first-child)::before {
                    // This will contain the divider
                    content: " ";
                    display: block;
                    position: absolute;
                    height: css.getVar("steps-divider-height");
                    width: 25%;
                    top: css.getVar("steps-size");
                    bottom: 0;
                    left: 50%;
                }

                &::before,
                &:not(:first-child)::before {
                    right: 50%;
                    left: auto;
                }
            }
        }
    }
}
