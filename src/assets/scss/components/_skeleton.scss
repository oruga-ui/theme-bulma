@use "utils/variables" as vars;
@use "bulma/sass/utilities/css-variables" as css;

/* @bulma docs */
// --bulma-skeleton-background: var(--bulma-border);
// --bulma-skeleton-radius: var(--bulma-radius-small);
// --bulma-skeleton-block-min-height: 4.5em;
// --bulma-skeleton-lines-gap: 0.75em;
// --bulma-skeleton-line-height: 0.75em;
/* @bulma docs */

.skeleton {
    @include css.register-vars(
        (
            "skeleton-border-radius": #{vars.$skeleton-border-radius},
            "skeleton-duration": #{vars.$skeleton-duration},
            "skeleton-margin-top": #{vars.$skeleton-margin-top},
        )
    );

    display: inline-flex;
    flex-direction: column;
    vertical-align: middle;
    width: 100%;

    > .skeleton-block {
        @include css.register-vars(
            (
                "skeleton-block-min-height": 1rem,
            )
        );
        line-height: css.getVar("skeleton-block-min-height");
        animation-duration: css.getVar("skeleton-duration");
        width: 100%;

        &.is-rounded {
            border-radius: css.getVar("skeleton-border-radius");
        }

        &::after {
            content: "\00a0";
        }

        + .skeleton-item {
            margin-top: css.getVar("skeleton-margin-top");
        }

        &:not(.is-animated) {
            animation-iteration-count: unset;
        }

        // sizes
        @each $name, $value in vars.$sizes-map {
            &.is-#{$name} {
                @include css.register-vars(
                    (
                        "skeleton-block-min-height": $value,
                    )
                );
            }
        }
    }

    &.is-left {
        align-items: flex-start;
    }

    &.is-centered {
        align-items: center;
    }

    &.is-right {
        align-items: flex-end;
    }

    + .skeleton {
        margin-top: css.getVar("skeleton-margin-top");
    }
}
